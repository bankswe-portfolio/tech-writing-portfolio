{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Technical Writing Portfolio","text":"<p>Welcome. This site shows polished, standalone samples across three doc types: - How-to for task-focused guidance - Concept for explanation and mental models - Reference for precise, scannable details</p> <p>You can view the source Markdown on GitHub via the \u201cEdit this page\u201d link at the top.</p>"},{"location":"about/about/","title":"About the Portfolio","text":"<p>This portfolio is built with MkDocs and Material for MkDocs, deployed on GitHub Pages. It demonstrates a docs-as-code workflow: Markdown source, version control, PR reviews, and automated publishing.</p>"},{"location":"samples/cli-reference-sample/","title":"CLI Reference (Sample)","text":"<p>Short, scannable reference entries.</p>"},{"location":"samples/cli-reference-sample/#acme-login","title":"<code>acme login</code>","text":"<p>Synopsis: Authenticate to Acme Cloud.</p> <pre><code>acme login [--token TOKEN] [--profile NAME]\n</code></pre> <p>Options - <code>--token</code> string. Personal access token. - <code>--profile</code> string. Named profile to update.</p>"},{"location":"samples/cli-reference-sample/#acme-deploy","title":"<code>acme deploy</code>","text":"<p>Synopsis: Deploy a service.</p> <pre><code>acme deploy --service NAME [--env prod|staging] [--wait]\n</code></pre> <p>Options - <code>--service</code> string. Required. - <code>--env</code> enum. Default <code>staging</code>. - <code>--wait</code> flag. Block until rollout completes.</p>"},{"location":"samples/how-to-deploy-flask-on-docker/","title":"Deploy a Flask App in Docker","text":"<p>Note</p> <p>Sample how-to. Short, task-focused, and testable.</p>"},{"location":"samples/how-to-deploy-flask-on-docker/#prerequisites","title":"Prerequisites","text":"<ul> <li>Docker installed</li> <li>Python 3.9+</li> </ul>"},{"location":"samples/how-to-deploy-flask-on-docker/#steps","title":"Steps","text":"<ol> <li>Create files:     <pre><code>mkdir flask-docker &amp;&amp; cd flask-docker\necho \"from flask import Flask; app = Flask(__name__); @app.get('/')\\ndef home(): return 'Hello, Docker!'\" &gt; app.py\necho \"Flask==3.0.0\" &gt; requirements.txt\n</code></pre></li> <li>Add a <code>Dockerfile</code>:     <pre><code>FROM python:3.12-slim\nWORKDIR /app\nCOPY requirements.txt .\nRUN pip install -r requirements.txt\nCOPY . .\nEXPOSE 5000\nCMD [\"python\", \"app.py\"]\n</code></pre></li> <li>Build and run:     <pre><code>docker build -t flask-demo .\ndocker run -p 5000:5000 flask-demo\n</code></pre></li> <li>Visit <code>http://localhost:5000</code></li> </ol>"},{"location":"samples/how-to-deploy-flask-on-docker/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>If the container exits, check logs:     <pre><code>docker logs &lt;container_id&gt;\n</code></pre></li> </ul>"},{"location":"samples/understanding-rbac/","title":"Understanding RBAC","text":"<p>Role-Based Access Control (RBAC) assigns permissions to roles, not individuals. Users inherit permissions by the roles they hold.</p>"},{"location":"samples/understanding-rbac/#why-it-matters","title":"Why it matters","text":"<ul> <li>Reduces permission sprawl</li> <li>Centralizes policy changes</li> <li>Auditable and easier to reason about</li> </ul>"},{"location":"samples/understanding-rbac/#core-concepts","title":"Core concepts","text":"<ul> <li>User: an identity</li> <li>Role: a named set of permissions</li> <li>Permission: an allowed action on a resource</li> <li>Assignment: user \u2194 role mapping</li> </ul>"},{"location":"samples/understanding-rbac/#common-pitfalls","title":"Common pitfalls","text":"<ul> <li>Too many bespoke roles</li> <li>Granting roles directly to service accounts without review</li> </ul>"}]}